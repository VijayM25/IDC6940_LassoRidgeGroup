{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This lab on Ridge Regression and the Lasso in R comes from p. 251-255 of \"Introduction to Statistical Learning with Applications in R\" by Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani. It was re-implemented in Fall 2016 in `tidyverse` format by Amelia McNamara and R. Jordan Crouser at Smith College.\n",
    "\n",
    "# 6.6: Ridge Regression and the Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "library(ISLR)\n",
    "library(glmnet)\n",
    "library(dplyr)\n",
    "library(tidyr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the `glmnet` package in order to perform ridge regression and\n",
    "the lasso. The main function in this package is `glmnet()`, which can be used\n",
    "to fit ridge regression models, lasso models, and more. This function has\n",
    "slightly different syntax from other model-fitting functions that we have\n",
    "encountered thus far in this book. In particular, we must pass in an $x$\n",
    "matrix as well as a $y$ vector, and we do not use the $y \\sim x$ syntax.\n",
    "\n",
    "Before proceeding, let's first ensure that the missing values have\n",
    "been removed from the data, as described in the previous lab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Hitters = na.omit(Hitters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now perform ridge regression and the lasso in order to predict `Salary` on\n",
    "the `Hitters` data. Let's set up our data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x = model.matrix(Salary~., Hitters)[,-1] # trim off the first column\n",
    "                                         # leaving only the predictors\n",
    "y = Hitters %>%\n",
    "  select(Salary) %>%\n",
    "  unlist() %>%\n",
    "  as.numeric()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `model.matrix()` function is particularly useful for creating $x$; not only\n",
    "does it produce a matrix corresponding to the 19 predictors but it also\n",
    "automatically transforms any qualitative variables into dummy variables.\n",
    "The latter property is important because `glmnet()` can only take numerical,\n",
    "quantitative inputs.\n",
    "\n",
    "# 6.6.1 Ridge Regression\n",
    "The `glmnet()` function has an alpha argument that determines what type\n",
    "of model is fit. If `alpha = 0` then a ridge regression model is fit, and if `alpha = 1`\n",
    "then a lasso model is fit. We first fit a ridge regression model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grid = 10^seq(10, -2, length = 100)\n",
    "ridge_mod = glmnet(x, y, alpha = 0, lambda = grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the `glmnet()` function performs ridge regression for an automatically\n",
    "selected range of $\\lambda$ values. However, here we have chosen to implement\n",
    "the function over a grid of values ranging from $\\lambda = 10^{10}$ to $\\lambda = 10^{-2}$, essentially covering the full range of scenarios from the null model containing\n",
    "only the intercept, to the least squares fit. \n",
    "\n",
    "As we will see, we can also compute\n",
    "model fits for a particular value of $\\lambda$ that is not one of the original\n",
    "grid values. Note that by default, the `glmnet()` function standardizes the\n",
    "variables so that they are on the same scale. To turn off this default setting,\n",
    "use the argument `standardize = FALSE`.\n",
    "\n",
    "Associated with each value of $\\lambda$ is a vector of ridge regression coefficients,\n",
    "stored in a matrix that can be accessed by `coef()`. In this case, it is a $20 \\times 100$\n",
    "matrix, with 20 rows (one for each predictor, plus an intercept) and 100\n",
    "columns (one for each value of $\\lambda$)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dim(coef(ridge_mod))\n",
    "plot(ridge_mod)    # Draw plot of coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We expect the coefficient estimates to be much smaller, in terms of $l_2$ norm,\n",
    "when a large value of $\\lambda$ is used, as compared to when a small value of $\\lambda$ is\n",
    "used. These are the coefficients when $\\lambda = 11498$, along with their $l_2$ norm:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ridge_mod$lambda[50] #Display 50th lambda value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "coef(ridge_mod)[,50] # Display coefficients associated with 50th lambda value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sqrt(sum(coef(ridge_mod)[-1,50]^2)) # Calculate l2 norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In contrast, here are the coefficients when $\\lambda = 705$, along with their $l_2$\n",
    "norm. Note the much larger $l_2$ norm of the coefficients associated with this\n",
    "smaller value of $\\lambda$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ridge_mod$lambda[60] #Display 60th lambda value\n",
    "coef(ridge_mod)[,60] # Display coefficients associated with 60th lambda value\n",
    "sqrt(sum(coef(ridge_mod)[-1,60]^2)) # Calculate l2 norm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the `predict()` function for a number of purposes. For instance,\n",
    "we can obtain the ridge regression coefficients for a new value of $\\lambda$, say 50:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "predict(ridge_mod, s = 50, type = \"coefficients\")[1:20,]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now split the samples into a training set and a test set in order\n",
    "to estimate the test error of ridge regression and the lasso."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "set.seed(1)\n",
    "\n",
    "train = Hitters %>%\n",
    "  sample_frac(0.5)\n",
    "\n",
    "test = Hitters %>%\n",
    "  setdiff(train)\n",
    "\n",
    "x_train = model.matrix(Salary~., train)[,-1]\n",
    "x_test = model.matrix(Salary~., test)[,-1]\n",
    "\n",
    "y_train = train %>%\n",
    "  select(Salary) %>%\n",
    "  unlist() %>%\n",
    "  as.numeric()\n",
    "\n",
    "y_test = test %>%\n",
    "  select(Salary) %>%\n",
    "  unlist() %>%\n",
    "  as.numeric()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we fit a ridge regression model on the training set, and evaluate\n",
    "its MSE on the test set, using $\\lambda = 4$. Note the use of the `predict()`\n",
    "function again: this time we get predictions for a test set, by replacing\n",
    "`type=\"coefficients\"` with the `newx` argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ridge_mod = glmnet(x_train, y_train, alpha=0, lambda = grid, thresh = 1e-12)\n",
    "ridge_pred = predict(ridge_mod, s = 4, newx = x_test)\n",
    "mean((ridge_pred - y_test)^2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The test MSE is 101242.7. Note that if we had instead simply fit a model\n",
    "with just an intercept, we would have predicted each test observation using\n",
    "the mean of the training observations. In that case, we could compute the\n",
    "test set MSE like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mean((mean(y_train) - y_test)^2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We could also get the same result by fitting a ridge regression model with\n",
    "a very large value of $\\lambda$. Note that `1e10` means $10^{10}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ridge_pred = predict(ridge_mod, s = 1e10, newx = x_test)\n",
    "mean((ridge_pred - y_test)^2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So fitting a ridge regression model with $\\lambda = 4$ leads to a much lower test\n",
    "MSE than fitting a model with just an intercept. We now check whether\n",
    "there is any benefit to performing ridge regression with $\\lambda = 4$ instead of\n",
    "just performing least squares regression. Recall that least squares is simply\n",
    "ridge regression with $\\lambda = 0$.\n",
    "\n",
    "\\* Note: In order for `glmnet()` to yield the **exact** least squares coefficients when $\\lambda = 0$,\n",
    "we use the argument `exact=T` when calling the `predict()` function. Otherwise, the\n",
    "`predict()` function will interpolate over the grid of $\\lambda$ values used in fitting the\n",
    "`glmnet()` model, yielding approximate results. Even when we use `exact = T`, there remains\n",
    "a slight discrepancy in the third decimal place between the output of `glmnet()` when\n",
    "$\\lambda = 0$ and the output of `lm()`; this is due to numerical approximation on the part of\n",
    "`glmnet()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ridge_pred = predict(ridge_mod, s = 0, newx = x_test, exact = T)\n",
    "mean((ridge_pred - y_test)^2)\n",
    "\n",
    "lm(Salary~., data = train)\n",
    "predict(ridge_mod, s = 0, exact = T, type=\"coefficients\")[1:20,]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like we are indeed improving over regular least-squares! Side note: in general, if we want to fit a (unpenalized) least squares model, then\n",
    "we should use the `lm()` function, since that function provides more useful\n",
    "outputs, such as standard errors and $p$-values for the coefficients.\n",
    "\n",
    "Instead of arbitrarily choosing $\\lambda = 4$, it would be better to\n",
    "use cross-validation to choose the tuning parameter $\\lambda$. We can do this using\n",
    "the built-in cross-validation function, `cv.glmnet()`. By default, the function\n",
    "performs 10-fold cross-validation, though this can be changed using the\n",
    "argument `folds`. Note that we set a random seed first so our results will be\n",
    "reproducible, since the choice of the cross-validation folds is random."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "set.seed(1)\n",
    "cv.out = cv.glmnet(x_train, y_train, alpha = 0) # Fit ridge regression model on training data\n",
    "bestlam = cv.out$lambda.min  # Select lamda that minimizes training MSE\n",
    "bestlam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Therefore, we see that the value of $\\lambda$ that results in the smallest cross-validation\n",
    "error is 339.1845 We can also plot the MSE as a function of $\\lambda$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plot(cv.out) # Draw plot of training MSE as a function of lambda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the test MSE associated with this value of\n",
    "$\\lambda$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ridge_pred = predict(ridge_mod, s = bestlam, newx = x_test) # Use best lambda to predict test data\n",
    "mean((ridge_pred - y_test)^2) # Calculate test MSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This represents a further improvement over the test MSE that we got using\n",
    "$\\lambda = 4$. Finally, we refit our ridge regression model on the full data set,\n",
    "using the value of $\\lambda$ chosen by cross-validation, and examine the coefficient\n",
    "estimates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "out = glmnet(x, y, alpha = 0) # Fit ridge regression model on full dataset\n",
    "predict(out, type = \"coefficients\", s = bestlam)[1:20,] # Display coefficients using lambda chosen by CV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As expected, none of the coefficients are exactly zero - ridge regression does not\n",
    "perform variable selection!\n",
    "\n",
    "# 6.6.2 The Lasso\n",
    "We saw that ridge regression with a wise choice of $\\lambda$ can outperform least\n",
    "squares as well as the null model on the Hitters data set. We now ask\n",
    "whether the lasso can yield either a more accurate or a more interpretable\n",
    "model than ridge regression. In order to fit a lasso model, we once again\n",
    "use the `glmnet()` function; however, this time we use the argument `alpha=1`.\n",
    "Other than that change, we proceed just as we did in fitting a ridge model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "lasso_mod = glmnet(x_train, \n",
    "                   y_train, \n",
    "                   alpha = 1, \n",
    "                   lambda = grid) # Fit lasso model on training data\n",
    "\n",
    "plot(lasso_mod)    # Draw plot of coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that in the coefficient plot that depending on the choice of tuning\n",
    "parameter, some of the coefficients are exactly equal to zero. We now\n",
    "perform cross-validation and compute the associated test error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "set.seed(1)\n",
    "cv.out = cv.glmnet(x_train, y_train, alpha = 1) # Fit lasso model on training data\n",
    "plot(cv.out) # Draw plot of training MSE as a function of lambda\n",
    "bestlam = cv.out$lambda.min # Select lamda that minimizes training MSE\n",
    "lasso_pred = predict(lasso_mod, s = bestlam, newx = x_test) # Use best lambda to predict test data\n",
    "mean((lasso_pred - y_test)^2) # Calculate test MSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is substantially lower than the test set MSE of the null model and of\n",
    "least squares, and very similar to the test MSE of ridge regression with $\\lambda$\n",
    "chosen by cross-validation.\n",
    "\n",
    "However, the lasso has a substantial advantage over ridge regression in\n",
    "that the resulting coefficient estimates are sparse. Here we see that 12 of\n",
    "the 19 coefficient estimates are exactly zero:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "out = glmnet(x, y, alpha = 1, lambda = grid) # Fit lasso model on full dataset\n",
    "lasso_coef = predict(out, type = \"coefficients\", s = bestlam)[1:20,] # Display coefficients using lambda chosen by CV\n",
    "lasso_coef"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting only the predictors with non-zero coefficients, we see that the lasso model with $\\lambda$\n",
    "chosen by cross-validation contains only seven variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "lasso_coef[lasso_coef != 0] # Display only non-zero coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Your turn!\n",
    "Now it's time to test out these approaches (ridge regression and the lasso) and evaluation methods (validation set, cross validation) on other datasets. You may want to work with a team on this portion of the lab.\n",
    "You may use any of the datasets included in ISLR, or choose one from the UCI machine learning repository (http://archive.ics.uci.edu/ml/datasets.html). Download a dataset, and try to determine the optimal set of parameters to use to model it! You are free to use the same dataset you used in Lab 9, or you can choose a new one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Your code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get credit for this lab, post your responses to the following questions:\n",
    " - Which dataset did you choose?\n",
    " - What was your response variable (i.e. what were you trying to model)?\n",
    " - Did you expect ridge regression to outperform the lasso, or vice versa?\n",
    " - Which predictors turned out to be important in the final model(s)?\n",
    " \n",
    "to Moodle: https://moodle.smith.edu/mod/quiz/view.php?id=259464"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.3.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}